#summary the documentation

= Documentation =

== How to insert the control in a page ==

First, you need to include the files needed by the plugin:

{{{
<link rel="stylesheet" href="fpsfbmselect.css" type="text/css"/>
<script type="text/javascript" src="jquery-1.3.2.min.js"></script>
<script type="text/javascript" src="jquery.fpsfbmselect-1.0.js"></script>
}}}

Then you can add a control as easy as this:

{{{
<div id="mycontrol"></div>
<script type="text/javascript">
    $('#mycontrol').fpsFBMSelect({
        'fieldName': 'myfield',
        'variantsURL': 'http://some/url/for/retrieving/variants/'
    });
</script>
}}}

== Available options ==

Here's a list of available options:

  * fieldName - required - name for hidden fields which will contain selected values (string),
  * enableUserInput - enable adding of user values (boolean, by default - false),
  * userFieldName - name for hidden fields which will contain values added by user (string, by default - equals to a 'fieldName' argument),
  * selectedValues - preselected values which will be added to a multiselect container immediately (array of objects, by default - empty array),
  * cacheVariants - enable caching of variants (boolean, by default - false),
  * variantsURL - URL for getting variants with AJAX request (string, by default - empty string),
  * variants - if variantsURL is not set, this array of variants will be used (array of objects, by default - empty array),
  * useVariantFilter - enable client side filtering of variants (boolean, by default - false),
  * variantFilter - custom function for filtering variants on the client side (function, by default - null),
  * variantHTMLRenderer - custom function for rendering HTML for variants and selected values (function, by default - null),
  * maxDropDownHeight - maximum height of drop down element in pixels (number, by default - 200),
  * requestPause - pause in milliseconds before triggering AJAX requests (number, by default - 700),
  * requestArgumentName - the name of argument for an URL, which will contain the value of text input (string, by default - 'q'),
  * hintText - text of a hint in the drop down box (string, by default - 'Type and select from variants.'),
  * loadingHintText - text of a hint while loading variant with AJAX request (string, by default - 'Loading list...'),
  * userVariantHintText - text of a hint, which prepends user variant in the drop down box (string, by default - 'Add new value:'),
  * maxSelectedValues - maximum amount of values, which a user can select (number, by default - null, which means there's no limit),
  * focusAfterAddingValue - enable focusing of a text input after selecting a value (boolean, by default - false).

== JSON response format ==

If you have provided 'variantsURL' parameter to the control, it will try to load variant list from that URL. By default, the JSON response from your server should be an array of objects and have the following format:

{{{
[
    {'value': 1, 'title': 'One'},
    {'value': 2, 'title': 'Two'},
    {'value': 3, 'title': 'Three'}
]
}}}

You may use as values not only integers, but strings too. That values will be placed in hidden fields when a user will select them.

Titles are shown to a user and used to render variants and selected values. They may contain not only plain text, but HTML code as well.

The variant objects may also have another attribute - 'orgn' (that means 'origin'), which indicates whether a variant came from your system (when its value is 'sys') or from a user (when its value is 'user'). User and system variants will be shown slightly different. Also, if you have provided 'userFieldName' parameter to the control, then user variants will be inserted in hidden fields with that name.

== Example usage in Django ==

You can find an example of a simple Django widget that uses fpsFBMSelect on the DjangoWidgetExample page.

== A note for PHP coders ==

Please, remember, that if you want to find an array of selected values in $_POST`[`'yourfield'`]`, $_GET`[`'yourfield'`]` or $_REQUEST`[`'yourfield'`]`, you should render that field on the form like this: 'yourfield`[]`'. This will tell PHP that 'yourfield' is an array.